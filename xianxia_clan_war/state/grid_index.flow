import ds/tree;
import xianxia_clan_war/game_types;
import algorithms;

// for each collision layer, we divide everything in cells of size gridCellSize and store who's in these cells
// TODO: use gameObjects in API
// addObjectToGrid/removeObjectToGrid is copypasted
// maybe we should have function to update object in grid
export {
	initGridIndex(size : Point) -> GridIndex;
	addObjectToGrid(id : int, bounds : BCircle, layers : [int], grid : GridIndex) -> GridIndex;
	removeObjectFromGrid(id : int, bounds : BCircle, layers : [int], grid : GridIndex) -> GridIndex;
	getNeighbourObjectIds(bounds : BCircle, layers : [int], grid : GridIndex) -> [int];
}

GridIndex(data : [Tree<IntPoint, [int]>]);

IntPoint(x : int, y : int);

gridCellSize = Point(100.0, 100.0);

initGridIndex(size : Point) -> GridIndex {
	GridIndex(map(enumFromTo(0, maxLayer), \__ -> makeTree()));
}

boundingCells(bounds : BCircle) -> [IntPoint] {
	xRange = enumFromTo(
		floor((bounds.coords.x - bounds.radius)/gridCellSize.x),
		ceil((bounds.coords.x - bounds.radius)/gridCellSize.x)
	);

	yRange = enumFromTo(
		floor((bounds.coords.y - bounds.radius)/gridCellSize.y),
		ceil((bounds.coords.y - bounds.radius)/gridCellSize.y)
	);
	mapConcat(xRange, \x -> map(yRange, \y -> IntPoint(x,y)))
}

addObjectToGrid(id : int, bounds : BCircle, layers : [int], grid : GridIndex) -> GridIndex {
	GridIndex(fold(layers, grid.data, \gridData, l -> {
		layerGrid = gridData[l];
		updGrid = fold(boundingCells(bounds), layerGrid, \tree, cell -> treePushToArrayValue(tree, cell, id));
		replace(gridData, l, updGrid);
	}))
}

removeObjectFromGrid(id : int, bounds : BCircle, layers : [int], grid : GridIndex) -> GridIndex {
	GridIndex(fold(layers, grid.data, \gridData, l -> {
		layerGrid = gridData[l];
		updGrid = fold(boundingCells(bounds), layerGrid, \tree, cell -> {
			cellValues = removeAll(lookupTreeDef(tree, cell, []), id);
			if (cellValues == []) {
				removeFromTree(tree, cell)
			} else {
				setTree(tree, cell, cellValues)
			}
		});
		replace(gridData, l, updGrid);
	}))
}

getNeighbourObjectIds(bounds : BCircle, layers : [int], grid : GridIndex) -> [int] {
	uniq(mapConcat(layers, \l -> {
		layerGrid = grid.data[l];
		mapConcat(boundingCells(bounds), \cell -> lookupTreeDef(layerGrid, cell, []));
	}))
}