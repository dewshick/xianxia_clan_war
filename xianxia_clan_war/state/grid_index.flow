import ds/tree;
import xianxia_clan_war/game_types;
import algorithms;

// for each collision layer, we divide everything in cells of size gridCellSize and store who's in these cells
// TODO: use gameObjects in API
// addObjectToGrid/removeObjectToGrid is copypasted
// maybe we should have function to update object in grid
export {
	initGridIndex(size : Point) -> GridIndex;
	addObjectToGrid(id : int, bounds : BCircle, layers : [int], grid : GridIndex) -> GridIndex;
	removeObjectFromGrid(id : int, bounds : BCircle, layers : [int], grid : GridIndex) -> GridIndex;
	updateObjectInGrid(id : int, oldBounds : BCircle, newBounds : BCircle, layers : [int], grid : GridIndex) -> GridIndex;
	getNeighbourObjectIds(bounds : BCircle, layers : [int], grid : GridIndex) -> [int];
}

// for each layer we have two-dimensional array of ints
GridIndex(data : [[[DynamicBehaviour<[int]>]]]);

IntPoint(x : int, y : int);

gridCellSize = Point(100.0, 100.0);

initGridIndex(size : Point) -> GridIndex {
	GridIndex(
		map(enumFromTo(0, maxLayer), \__ -> {
			map(enumFromTo(0, ceil(size.x / gridCellSize.x)), \__ -> {
				map(enumFromTo(0, ceil(size.y / gridCellSize.y)), \__ -> make([]))
			})
		})
	);
}

boundingCells(bounds : BCircle) -> [IntPoint] {
	xRange = enumFromTo(
		max(floor((bounds.coords.x - bounds.radius)/gridCellSize.x), 0),
		max(ceil((bounds.coords.x - bounds.radius)/gridCellSize.x), 0)
	);

	yRange = enumFromTo(
		max(floor((bounds.coords.y - bounds.radius)/gridCellSize.y), 0),
		max(ceil((bounds.coords.y - bounds.radius)/gridCellSize.y), 0)
	);
	mapConcat(xRange, \x -> map(yRange, \y -> IntPoint(x,y)))
}

addObjectToGrid(id : int, bounds : BCircle, layers : [int], grid : GridIndex) -> GridIndex {
	iter(layers, \l -> iter(boundingCells(bounds), \cell -> {
		cellData = getGridData(grid, l, cell);
		next(cellData, arrayPush(getValue(cellData), id))
	}));
	grid;
}

removeObjectFromGrid(id : int, bounds : BCircle, layers : [int], grid : GridIndex) -> GridIndex {
	iter(layers, \l -> iter(boundingCells(bounds), \cell -> {
		cellData = getGridData(grid, l, cell);
		next(cellData, removeAll(getValue(cellData), id))
	}));
	grid;
}

getNeighbourObjectIds(bounds : BCircle, layers : [int], grid : GridIndex) -> [int] {
	sortUnique(mapConcat(layers, \l -> {
		mapConcat(boundingCells(bounds), \cell -> getValue(getGridData(grid, l, cell)));
	}))
}

getGridData(grid : GridIndex, layer : int, cell : IntPoint) -> DynamicBehaviour<[int]> {
	elementAt(elementAt(grid.data[layer], cell.x, []), cell.y, make([]))
}

// sortUniq(arr : [int]) -> [int] {
// 	arr
// }

updateObjectInGrid(id : int, oldBounds : BCircle, newBounds : BCircle, layers : [int], grid : GridIndex) -> GridIndex {
	oldCells = boundingCells(oldBounds);
	newCells = boundingCells(newBounds);
	if (oldCells == newCells) {
		grid
	} else {
		// TODO: maybe more precise work here can save more. don't forget to remove empty arrays!
		// disappeared = subtractA(oldCells, newCells);
		// appeared = subtractA(newCells, oldCells);
		addObjectToGrid(id, newBounds, layers, removeObjectFromGrid(id, oldBounds, layers, grid))
	}
}
