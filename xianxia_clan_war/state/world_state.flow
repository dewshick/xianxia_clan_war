import xianxia_clan_war/game_types;
import xianxia_clan_war/state/grid_index;
import xianxia_clan_war/state/object_storage;

export {
	WorldState(size : Point, objectIndex : ObjectIndex);
	initWorldState(size : Point) -> WorldState;
	addObjectToIndex(idxObjs : ObjectIndex, obj : GameObject) -> ObjectIndex;
	removeObjectFromIndex(idxObjs : ObjectIndex, id : int) -> ObjectIndex;
	mapObjectIndex(idxObjs : ObjectIndex, fn : (GameObject) -> GameObject) -> ObjectIndex;
	getObjects(idxObjs : ObjectIndex) -> [GameObject];
	// todo make better index, unite layered index and grid
	getNeighbourObjects(obj : GameObject, world : WorldState) -> [GameObject];
}

initWorldState(size : Point) -> WorldState {
	WorldState(size, ObjectIndex(initObjectStorage(), ref initGridIndex(size)))
}

ObjectIndex(
	objects : ObjectStorage,
	grid : ref GridIndex
);

addObjectToIndex(idxObjs : ObjectIndex, obj : GameObject) -> ObjectIndex {
	subscriber = \objId -> subscribeToUpd(obj.bounds, \old, new -> {
		idxObjs.grid := addObjectToGrid(objId, new, obj.schema.layers, removeObjectFromGrid(objId, old, obj.schema.layers, ^(idxObjs.grid)));
	});

	unpair(addObjectToStorage(obj, idxObjs.objects, subscriber), \objId, newObjects -> {
		ObjectIndex(newObjects, idxObjs.grid)
	});
}

subscribeToUpd(val : Behaviour<?>, fn : (?, ?) -> void) -> () -> void {
	oldVal = ref getValue(val);
	subscribe(val, \newVal -> {
		fn(^oldVal, newVal);
		oldVal := newVal;
	})
}

removeObjectFromIndex(idxObjs : ObjectIndex, id : int) -> ObjectIndex {
	unpair(removeObjectFromStorage(id, idxObjs.objects), \oldObj, objects -> {
		idxObjs.grid := removeObjectFromGrid(id, getValue(oldObj.bounds), oldObj.schema.layers, ^(idxObjs.grid));
		ObjectIndex(objects, idxObjs.grid)
	})
}

mapObjectIndex(idxObjs : ObjectIndex, fn : (GameObject) -> GameObject) -> ObjectIndex {
	ObjectIndex(idxObjs with objects = ObjectStorage(idxObjs.objects with objects=mapTree(idxObjs.objects.objects, \objDisp -> {
		obj = objDisp.value;
		newObj = Disposable(fn(obj), objDisp.dispose);
		if (newObj.value.schema == obj.schema) {
			newObj
		} else {
			fail0("we assumed schema to be kept. now it changed from " + obj.schema.name + " to " + newObj.value.schema.name)
		}
	})))
}

getObjects(idxObjs : ObjectIndex) -> [GameObject] {
	map(getTreeValues(idxObjs.objects.objects), \obj -> obj.value)
}

getNeighbourObjects(obj : GameObject, world : WorldState) -> [GameObject] {
	ids = getNeighbourObjectIds(getValue(obj.bounds), obj.schema.layers, ^(world.objectIndex.grid));
	filtermap(ids, \id -> maybeMap(lookupTree(world.objectIndex.objects.objects, id), \o -> o.value))
}