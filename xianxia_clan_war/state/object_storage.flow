import xianxia_clan_war/game_types;

// todo: make it abstract datatype
export {
	ObjectStorage(
		objects : [ref Maybe<Disposable<GameObject>>],
		lastInsertId : int,
		freeIds : [int],
	);

	initObjectStorage() -> ObjectStorage;
	addObjectToStorage(newObj : GameObject, storage : ObjectStorage, subscriber : (int) -> (() -> void)) -> Pair<int, ObjectStorage>;
	removeObjectFromStorage(id : int, storage : ObjectStorage) -> Pair<GameObject, ObjectStorage>;
}

initObjectStorage() {
	ObjectStorage(map(enumFromTo(0, 50000), \__ -> ref None()), 0, [])
}

addObjectToStorage(newObj : GameObject, storage : ObjectStorage, subscriber : (int) -> (() -> void)) -> Pair<int, ObjectStorage> {
	addObjectWithId = \objId, lastId, freeIds -> {
		dispObj = Disposable(newObj, subscriber(objId));
		storage.objects[objId] := Some(dispObj);
		Pair(objId, ObjectStorage(storage.objects, lastId, freeIds));
	}

	if (storage.freeIds == []) {
		objId = storage.lastInsertId + 1;
		addObjectWithId(objId, objId, storage.freeIds)
	} else {
		addObjectWithId(storage.freeIds[0], storage.lastInsertId, tail(storage.freeIds))
	}
}

removeObjectFromStorage(id : int, storage : ObjectStorage) -> Pair<GameObject, ObjectStorage> {
	oldObj = eitherFn(^(storage.objects[id]), idfn, \ -> fail0("missing index: " + i2s(id)));
	oldObj.dispose();
	storage.objects[id] := None();

	Pair(oldObj.value, ObjectStorage(
		storage.objects, 
		storage.lastInsertId, 
		arrayPush(storage.freeIds, id)
	))
}