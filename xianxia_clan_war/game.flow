import material/material_graphics;
import material/material_manager;
import material/material_dialog;
import xianxia_clan_war/collisions;

generateGameObject(world : WorldState, schema : GameObjectSchema, attempts : int) -> Maybe<GameObject> {
	newObj = mkGameObject(schema, Point(random() * world.size.x, random() * world.size.y));
	if (attempts == 0) {
		None()
	} else if (collidesWith(newObj, world, schema.distToObj) == []) {
		Some(newObj)
	} else {
		generateGameObject(world, schema, attempts-1)
	}
}

generateWorld(size : Point) -> WorldState {
	sizeMult = \i -> ceil(i2d(i) * size.x * size.y / (defaultSize.x * defaultSize.y));
	world = fold([
		Pair(TREE, sizeMult(190)), 
		Pair(GRASS, sizeMult(7000)), 
		Pair(PLAYER, 1), 
		Pair(HARE, sizeMult(50)), 
		Pair(WOLF, sizeMult(10)),
		Pair(WANDERER, sizeMult(30)), 
	], initWorldState(size), \world, schemaCount -> unpair(schemaCount, \schema, count -> {
		foldUntil(enumFromTo(1, count), world, \w, i -> {
			result = eitherMap(
				generateGameObject(w, schema, 5), 
				\obj -> Pair(true, WorldState(w.size, addObjectToIndex(w.objectIndex, obj))), 
				Pair(false, w)
			);
			if (!result.first) { 	println("Fail: " + schema.name + " on " + i2s(i) + "of " + i2s(count)); }
			result
		})
	}));
	world;
}

defaultSize = Point(1024.0, 600.0);

main() {
	world = generateWorld(defaultSize /*Point(2000.0, 2000.0)*/);
	renderWorld(world);
	updateWorldLoop(world);
}

updGameObject(world : WorldState, obj : GameObject) -> GameObject {
	either(findmap(obj.goals, \g -> switch (g) {
		Wander() : maybeMap(generateGameObject(world, obj.schema, 10), \newDest -> {
			updGoals : [Goal] = concat([MoveTowards(newDest)], obj.goals);
			updGameObject(world, GameObject(obj.schema, obj.bounds, updGoals));
		});
		Hunt(schema) : None(); //TODO
		Reproduce() : None(); //TODO
		Avoid(schema) : None(); //TODO
		MoveTowards(obj2) : {
			if (collide(obj, obj2, 0.0)) {
				Some(GameObject(obj.schema, obj.bounds, removeFirst(obj.goals, g)))
			} else {
				Some(moveTowards(obj, obj2, world))
			}
		};
	}), obj);
}

updateWorldLoop(world : WorldState) -> void {
	timer(8, \ -> {
		updW = WorldState(world.size, mapObjectIndex(world.objectIndex, \obj -> updGameObject(world, obj)));
		updateWorldLoop(updW);
	});
}

renderWorld(world : WorldState) -> () -> void {
	mrender(makeMaterialManager([]), false, MGroup(concat(
		[TRectangle([Fill(svgName2color("greenyellow", black))], TFixed(world.size.x, world.size.y))], 
		map(getObjects(world.objectIndex), \gameObj -> {
			MSelect(gameObj.bounds, \bounds -> {
				MOffset(bounds.coords.x - bounds.radius, bounds.coords.y - bounds.radius, 
					MCircle(bounds.radius, [Fill(gameObj.schema.color)]))
			})
		})
	)));
}